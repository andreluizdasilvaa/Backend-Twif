// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// crie um arquivo .env na raiz do projeto e insira as informações nele.
// DATABASE_URL="mysql://username:password@localhost:3306/mydatabase"

// comando para executar as modificações em tabelas, colunas etc.
// npx prisma migrate dev --name init --schema ./Backend/src/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  senha         String
  usernick      String    @unique 
  nome          String
  isadmin       Boolean   @default(false)
  profilePicture String   @default("defaultphoto.png")
  createdAt     DateTime  @default(now())

  // Relacionamento com Postagens e Comentários
  posts         Post[]    // Um usuário pode ter várias postagens
  comments      Comment[] // Um usuário pode ter vários comentários
  likes         Like[]    // Um usuário pode curtir várias postagens
}

model Post {
  id            Int       @id @default(autoincrement())
  content       String
  createdAt     DateTime  @default(now())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])

  // Relacionamento com Curtidas e Comentários
  likes         Like[]    // Um post pode ter várias curtidas
  comments      Comment[] // Um post pode ter vários comentários
}

model Comment {
  id        Int      @id @default(autoincrement()) // ID auto-incrementado
  content   String   // Conteúdo do comentário
  postId    Int      // Relacionamento com o Post
  userId    Int      // Relacionamento com o Usuário
  createdAt DateTime @default(now()) // Data de criação
  updatedAt DateTime @updatedAt // Data de atualização

  post      Post     @relation(fields: [postId], references: [id]) // Relacionamento com o Post
  user      User     @relation(fields: [userId], references: [id]) // Relacionamento com o Usuário
}

model Like {
  id            Int       @id @default(autoincrement())
  userId        Int
  postId        Int
  user          User      @relation(fields: [userId], references: [id])
  post          Post      @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // Um usuário só pode curtir uma vez cada post
}