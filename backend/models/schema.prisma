// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// crie um arquivo .env na raiz do projeto e insira as informações nele.
// DATABASE_URL="mysql://username:password@localhost:3306/mydatabase"

// comando para executar as modificações em tabelas, colunas etc.
// npx prisma generate --schema=./models/schema.prisma
// npx prisma db push --schema=./models/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  senha         String
  usernick      String    @unique 
  nome          String
  isadmin       Boolean   @default(false)
  profilePicture String   @default("defaultphoto.png")
  createdAt     DateTime  @default(now())

  // Relacionamento com Postagens, Comentários e Curtidas
  posts         Post[]    // Um usuário pode ter várias postagens
  comments      Comment[] // Um usuário pode ter vários comentários
  likes         Like[]    // Um usuário pode curtir várias postagens
  postsDeleted  PostDeleted[] // Um usuário pode ter várias postagens deletadas
  
  // Relacionamento com Notificações
  notificationsReceived Notification[] @relation("NotificationRecipient") // Notificações recebidas
  notificationsTriggered Notification[] @relation("NotificationTrigger") // Notificações acionadas
}

model Post {
  id            Int       @id @default(autoincrement())
  content       String
  createdAt     DateTime  @default(now())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])

  // Relacionamento com Curtidas e Comentários
  likes         Like[]    // Um post pode ter várias curtidas
  comments      Comment[] // Um post pode ter vários comentários
  notifications Notification[] // Um post pode ter várias notificações associadas
}

model PostDeleted {
  id            Int       @id @default(autoincrement())
  postId        Int       @unique // Mantém o ID do post original para referência
  content       String
  createdAt     DateTime  @default(now())
  userId        Int
  user          User      @relation(fields: [userId], references: [id])

  // Relacionamento inverso com Notification
  notifications Notification[] @relation("PostDeletedNotifications") // Relacionamento inverso
}

model Notification {
  id            Int       @id @default(autoincrement())
  userId        Int       // Usuário que receberá a notificação
  triggeredById Int       // Usuário que acionou a notificação (fez a ação)
  postId        Int?      // Post relacionado à notificação (se ainda existir)
  postDeletedId Int?      // Post deletado relacionado à notificação
  action        String    // Tipo de ação: 'like', 'comment', 'postDeleteByAdm'
  isViewed      Boolean   @default(false)
  createdAt     DateTime  @default(now())

  user          User         @relation("NotificationRecipient", fields: [userId], references: [id]) 
  triggeredBy   User         @relation("NotificationTrigger", fields: [triggeredById], references: [id])
  post          Post?        @relation(fields: [postId], references: [id]) // Agora opcional
  postDeleted   PostDeleted? @relation("PostDeletedNotifications", fields: [postDeletedId], references: [id]) // Relacionamento com post deletado

  @@index([userId, isViewed])
}

model Comment {
  id            Int       @id @default(autoincrement()) // ID auto-incrementado
  content       String    // Conteúdo do comentário
  postId        Int      // Relacionamento com o Post ou PostDeleted
  userId        Int      // Relacionamento com o Usuário
  createdAt     DateTime @default(now()) // Data de criação
  updatedAt     DateTime @updatedAt // Data de atualização

  post          Post     @relation(fields: [postId], references: [id], map: "Comment_PostId_FK") // Relacionamento com o Post
  user          User     @relation(fields: [userId], references: [id]) // Relacionamento com o Usuário
}

model Like {
  id            Int       @id @default(autoincrement())
  userId        Int
  postId        Int
  user          User      @relation(fields: [userId], references: [id])
  post          Post      @relation(fields: [postId], references: [id], map: "Like_PostId_FK") // Relacionamento com o Post

  @@unique([userId, postId]) // Um usuário só pode curtir uma vez cada post
}