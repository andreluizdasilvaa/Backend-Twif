generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id             Int      @id @default(autoincrement())
  email          String   @unique(map: "User_email_key") @db.VarChar(150)
  senha          String   @db.VarChar(100)
  usernick       String   @unique(map: "User_usernick_key") @db.VarChar(50)
  nome           String   @db.VarChar(100)
  isadmin        Boolean  @default(false)
  profilePicture String   @default("defaultphoto.png") @db.VarChar(150)
  createdAt      DateTime @default(now())

  posts                 post[]
  comments              comment[]
  likes                 like[]
  notifications         notification[] @relation("NotifiedUser")
  triggeredNotifications notification[] @relation("TriggeringUser")
}

model post {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(500)
  createdAt DateTime  @default(now())
  userId    Int

  user      user      @relation(fields: [userId], references: [id])
  comments  comment[]
  likes     like[]
}

model comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(300)
  postId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime

  post      post     @relation(fields: [postId], references: [id])
  user      user     @relation(fields: [userId], references: [id])
}

model postdeleted {
  id        Int      @id @default(autoincrement())
  postId    Int      @unique(map: "PostDeleted_postId_key")
  content   String   @db.VarChar(500)
  createdAt DateTime @default(now())
  userId    Int

  @@index([userId], map: "PostDeleted_userId_fkey")
}

model notification {
  id            Int      @id @default(autoincrement())
  userId        Int
  triggeredById Int
  postId        Int?
  postDeletedId Int?
  action        String   @db.VarChar(100)
  isViewed      Boolean  @default(false)
  createdAt     DateTime @default(now())

  user         user @relation("NotifiedUser", fields: [userId], references: [id])
  triggeredBy  user @relation("TriggeringUser", fields: [triggeredById], references: [id])
}

model like {
  id     Int   @id @default(autoincrement())
  userId Int
  postId Int

  user   user  @relation(fields: [userId], references: [id])
  post   post  @relation(fields: [postId], references: [id])
}
